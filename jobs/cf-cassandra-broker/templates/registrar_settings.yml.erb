<%
  require 'json'
  def discover_external_ip
    networks = spec.networks.marshal_dump
    _, network = networks.find do |_name, network_spec|
      network_spec.default
    end
    if !network
      _, network = networks.first
    end
    if !network
      raise "Could not determine IP via network spec: #{networks}"
    end
    network.ip
  end

  nats_ips = nil
  if_p('nats.machines') do |ips|
    nats_ips = ips.compact
  end.else do
    nats_ips = link('nats').instances.map { |instance| instance.address }
  end

  nats_port = nil
  if_p('nats.port') do |prop|
    nats_port = prop
  end.else do
    nats_port = link('nats').p("nats.port")
  end

  nats_user = nil
  if_p('nats.user') do |prop|
    nats_user = prop
  end.else do
    nats_user = link('nats').p("nats.user")
  end

  nats_password = nil
  if_p('nats.password') do |prop|
    nats_password = prop
  end.else do
    nats_password = link('nats').p("nats.password")
  end
%>
---
message_bus_servers:
<% nats_ips.each do |ip| %>
    - host: <%= ip %>:<%= nats_port %>
      user: <%= nats_user %>
      password: <%= nats_password %>
<% end %>

routes:
  - name: <%= p("broker.name") %>
    port: <%= p("port") %>
    registration_interval: 20s
    uris: ["<%= p("broker.name") %>.<%= p("cf.system_domain") %>"]

host: <%= discover_external_ip %>
